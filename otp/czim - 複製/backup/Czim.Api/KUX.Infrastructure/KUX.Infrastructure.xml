<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KUX.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:KUX.Infrastructure.ApiVersions">
            <summary>
            接口版本枚举
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.AdminConfiguration">
            <summary>
            程序配置信息映射类 appsettings.json
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.AdminConfiguration.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造
            </summary>
            <param name="configuration">配置文件</param>
        </member>
        <member name="M:KUX.Infrastructure.AdminConfiguration.Mapping(System.String)">
            <summary>
            映射数据 到 属性
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:KUX.Infrastructure.AdminConfiguration.AppTitle">
            <summary>
            app 标题
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.AdminConfiguration.JwtKeyName">
            <summary>
            jwt key
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.AdminConfiguration.JwtSecurityKey">
            <summary>
            jwt 秘钥
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.AdminConfiguration.AdminRoleId">
            <summary>
            超管id
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.AdminConfiguration.EaseAdminId">
            <summary>
            admin 环信id
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.AdminConfiguration.SysMenuId">
            <summary>
            系统菜单id
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.AdminConfiguration.AuthorizationKeyName">
            <summary>
            author key
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.AppConfiguration">
            <summary>
            程序配置信息映射类 appsettings.json
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.AppConfiguration.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造
            </summary>
            <param name="configuration">配置文件</param>
        </member>
        <member name="M:KUX.Infrastructure.AppConfiguration.Mapping(System.String)">
            <summary>
            映射数据 到 属性
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:KUX.Infrastructure.AppConfiguration.AppTitle">
            <summary>
            app 标题
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.AppConfiguration.JwtKeyName">
            <summary>
            jwt key
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.AppConfiguration.JwtSecurityKey">
            <summary>
            jwt 秘钥
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.AppConfiguration.AuthorizationKeyName">
            <summary>
            author key
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.ConvertExtensions">
            <summary>
            数据转换扩展
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToStr``1(``0)">
            <summary>
            string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToInt32``1(``0)">
            <summary>
            int
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToFloat``1(``0)">
            <summary>
            float
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToDouble``1(``0)">
            <summary>
            double
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToDecimal``1(``0)">
            <summary>
            decimal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToGuid``1(``0)">
            <summary>
            Guid
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToGuidNull``1(``0)">
            <summary>
            Guid?
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToGuidStr``1(``0)">
            <summary>
            GuidString
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToDateTime``1(``0)">
            <summary>
            DateTime
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToDateTimeNull``1(``0)">
            <summary>
            DateTime?
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToDateTimeFormat``1(``0,System.String)">
            <summary>
            格式的 时间 字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="formatStr"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToBool``1(``0)">
            <summary>
            bool
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToBytes``1(``0)">
            <summary>
            byte[]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToTime``1(System.Int32)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="timeStamp"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.ToTimeInt``1(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.CreateInstance``1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ConvertExtensions.NullSafe``1(``0,``0)">
            <summary>
            将 Null 对象转换为 对象的实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="defaultInstance">自定义 默认实例</param>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.DefaultDatabaseType">
            <summary>
            默认数据库类型
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.Http.HttpHelper">
            <summary>
            静态Http请求
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Http.HttpHelper.HttpSendAsync(System.Net.Http.IHttpClientFactory,System.Net.Http.HttpMethod,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            发送http请求消息
            </summary>
            <param name="httpClientFactory"></param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="httpContent">请求内容（json字符串）</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Http.HttpHelper.HttpSendStatusAsync(System.Net.Http.IHttpClientFactory,System.Net.Http.HttpMethod,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            发送http请求消息
            </summary>
            <param name="httpClientFactory"></param>
            <param name="httpMethod"></param>
            <param name="url"></param>
            <param name="httpContent">请求内容（json字符串）</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.MessageQueue.IMessageQueueProvider">
            <summary>
            消息队列提供者
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.MessageQueue.IMessageQueueProvider.RunAsync">
            <summary>
            启动运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.MessageQueue.IMessageQueueProvider.SendMessageQueueAsync(System.String,System.Object,System.Action{System.Object,System.IServiceProvider})">
            <summary>
            发布消息队列
            </summary>
            <param name="key">关键key</param>
            <param name="message">消息内容</param>
            <param name="action">回调方法</param>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.MessageQueue.MessageQueueProvider">
            <summary>
            消息队列提供者
            </summary>
        </member>
        <member name="F:KUX.Infrastructure.MessageQueue.MessageQueueProvider.blockingCollection">
            <summary>
            线程安全集合类
            </summary>
        </member>
        <member name="F:KUX.Infrastructure.MessageQueue.MessageQueueProvider._mre">
            <summary>
            信号
            </summary>
        </member>
        <member name="F:KUX.Infrastructure.MessageQueue.MessageQueueProvider._services">
            <summary>
            服务提供商
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.MessageQueue.MessageQueueProvider.#ctor(System.IServiceProvider)">
            <summary>
            构造
            </summary>
            <param name="services">服务提供者</param>
        </member>
        <member name="M:KUX.Infrastructure.MessageQueue.MessageQueueProvider.IsComleted">
            <summary>
            是否完成
            </summary>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.MessageQueue.MessageQueueProvider.RunAsync">
            <summary>
            执行队列方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.MessageQueue.MessageQueueProvider.SendMessageQueueAsync(System.String,System.Object,System.Action{System.Object,System.IServiceProvider})">
            <summary>
            发布消息队列
            </summary>
            <param name="key">key</param>
            <param name="message">消息内容</param>
            <param name="action">回调方法</param>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.MessageQueue.Models.MessageQueueContext">
            <summary>
            消息队列上下文
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.MessageQueue.Models.MessageQueueContext.Key">
            <summary>
            队列主键
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.MessageQueue.Models.MessageQueueContext.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.MessageQueue.Models.MessageQueueContext.Call">
            <summary>
            队列回调函数
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.NLogService.NLogUtil">
            <summary>
            参考地址：
                        https://www.cnblogs.com/muyeh/p/9788311.html
                        https://www.cnblogs.com/qulianqing/p/7222177.html
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.NLogService.NLogUtil.GetLogger">
            <summary>
            日志对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.NLogService.NLogUtil.Write(System.String)">
            <summary>
            写入日志
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:KUX.Infrastructure.NLogService.NLogUtil.WriteDebug(System.String)">
            <summary>
            Debug
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:KUX.Infrastructure.NLogService.NLogUtil.Write(System.String,System.Exception)">
            <summary>
            写入日志
            </summary>
            <param name="text"></param>
            <param name="exception"></param>
        </member>
        <member name="M:KUX.Infrastructure.NLogService.NLogUtil.WriteError(System.Exception,System.String,System.Action{System.Text.StringBuilder})">
            <summary>
            写入日志
            </summary>
            <param name="exception"></param>
            <param name="userHostAddress"></param>
            <param name="callBack"></param>
        </member>
        <member name="T:KUX.Infrastructure.ObjectMapper">
            <summary>
            对象映射类
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.ObjectMapper.MapTo``2(``0)">
            <summary>
            copy object
            </summary>
            <typeparam name="TOld">旧对象类型</typeparam>
            <typeparam name="TNew">新复制对象类型</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ObjectMapper.MapToList``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            copy list
            </summary>
            <typeparam name="TOld">旧对象类型</typeparam>
            <typeparam name="TNew">新复制对象类型</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.Permission.Attributes.ActionDescriptorAttribute">
            <summary>
            action 功能模块描述
            </summary>
        </member>
        <member name="F:KUX.Infrastructure.Permission.Attributes.ActionDescriptorAttribute._functionName">
            <summary>
            功能名称
            </summary>
        </member>
        <member name="F:KUX.Infrastructure.Permission.Attributes.ActionDescriptorAttribute.AuthCheck">
            <summary>
            授权检查 默认检查
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Permission.Attributes.ActionDescriptorAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="functionName">方法名称</param>
        </member>
        <member name="M:KUX.Infrastructure.Permission.Attributes.ActionDescriptorAttribute.GetFunctionName">
            <summary>
            获取功能名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.Permission.Attributes.ControllerDescriptorAttribute">
            <summary>
            控制器 接口 描述
            </summary>
        </member>
        <member name="F:KUX.Infrastructure.Permission.Attributes.ControllerDescriptorAttribute._menuId">
            <summary>
            用于接口权限鉴定 菜单id
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Permission.Attributes.ControllerDescriptorAttribute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Permission.Attributes.ControllerDescriptorAttribute.#ctor(System.String)">
            <summary>
            控制器描述
            </summary>
            <param name="menuId">用于接口权限鉴定 菜单id</param>
        </member>
        <member name="M:KUX.Infrastructure.Permission.Attributes.ControllerDescriptorAttribute.GetMenuId">
            <summary>
            获取菜单 Id
            </summary>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.ReadXmlSummary">
            <summary>
            读取 xml 摘要
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.Redis.IRedisService">
            <summary>
            redis 缓存接口
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.Redis.IRedisService.iServer">
            <summary>
            redis服务
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.Redis.RedisExtensions">
            <summary>
            Redis 扩展
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.Redis.RedisExtensions.JsonConfig">
            <summary>
            json 配置
            </summary>
            <value></value>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisExtensions.RegisterRedisService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            注册 Redis 服务
            </summary>
            <param name="service"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisExtensions.FindByKeyAsync``1(KUX.Infrastructure.Redis.IRedisService,System.String,System.Int32)">
            <summary>
            根据 key 获取数据
            </summary>
            <param name="redisService"></param>
            <param name="key"></param>
            <param name="db">默认数据库</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisExtensions.AddOrUpdateByKeyAsync``1(KUX.Infrastructure.Redis.IRedisService,System.String,``0,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            根据 key 插入 或者 修改 数据
            </summary>
            <param name="redisService"></param>
            <param name="key"></param>
            <param name="data"></param>
            <param name="cacheTime"></param>
            <param name="db">默认db</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisExtensions.ExistsByKeyAsync(KUX.Infrastructure.Redis.IRedisService,System.String,System.Int32)">
            <summary>
            根据 key 查看是否存在
            </summary>
            <param name="redisService"></param>
            <param name="key"></param>
            <param name="db">默认db</param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisExtensions.DeleteByKeyAsync(KUX.Infrastructure.Redis.IRedisService,System.String,System.Int32)">
            <summary>
            根据 key 移除数据
            </summary>
            <param name="redisService"></param>
            <param name="key"></param>
            <param name="db">默认链接</param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisExtensions.FlushDatabase(KUX.Infrastructure.Redis.IRedisService,System.Int32)">
            <summary>
            删除对应库的所有缓存信息
            </summary>
            <param name="redisService"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.Redis.RedisPackage`1">
            <summary>
            Redis 外包装
            记录过期时间 以及 写入时间和缓存结束时间
            </summary>
            <typeparam name="TBody"></typeparam>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisPackage`1.#ctor(`0,System.Nullable{System.DateTime})">
            <summary>
            构造
            </summary>
            <param name="body">消息提</param>
            <param name="cacheEndTime">缓存结束时间</param>
        </member>
        <member name="P:KUX.Infrastructure.Redis.RedisPackage`1.ExpirationTime">
            <summary>
            过期时长
            单位：s
            默认：3600s=1小时
            </summary>
            <value></value>
        </member>
        <member name="P:KUX.Infrastructure.Redis.RedisPackage`1.CacheEndTime">
            <summary>
            缓存结束时间
            </summary>
            <value></value>
        </member>
        <member name="P:KUX.Infrastructure.Redis.RedisPackage`1.Body">
            <summary>
            数据主体
            </summary>
            <value></value>
        </member>
        <member name="T:KUX.Infrastructure.Redis.RedisService">
            <summary>
            Redis 服务类
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisService.GetDatabase(System.Int32)">
            <summary>
            获取redis db 链接
            </summary>
            <param name="db">链接db</param>
            <returns></returns>
        </member>
        <member name="P:KUX.Infrastructure.Redis.RedisService.iServer">
            <summary>
            redis 服务
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.Redis.RedisService._multiplexer">
            <summary>
            多路复用器
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.Redis.RedisService.Multiplexer">
            <summary>
            多路复用器
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.Redis.RedisService.DefalutDataBase">
            <summary>
            默认库
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisService.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:KUX.Infrastructure.Redis.RedisService.Dispose">
            <summary>
            析构
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.Attributes.DIServiceAttribute">
            <summary>
            服务标记 用于 程序 启动 扫描到后自动 注册服务
            </summary>
        </member>
        <member name="P:KUX.Infrastructure.ScanDIService.Attributes.DIServiceAttribute.IgnoreCurrent">
            <summary>
            忽略当前 对象 服务
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.ScanDIService.Attributes.DIServiceAttribute.#ctor(KUX.Infrastructure.ScanDIService.Enums.DIType)">
            <summary>
            构造
            </summary>
            <param name="dIType"></param>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.DIServiceScanningExtensions">
            <summary>
            服务扫描扩展
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.ScanDIService.DIServiceScanningExtensions.ScanningAppServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            扫描服务 自动注入服务
            </summary>
            <param name="serviceCollection"></param>
            <param name="assemblyFilter"></param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:KUX.Infrastructure.ScanDIService.DIServiceScanningExtensions.GetAssemblyList(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            获取所有的 程序集
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.DIServiceScanningProvider">
            <summary>
            扫描服务
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.ScanDIService.DIServiceScanningProvider.Start(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            开始扫描
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.ScanDIService.DIServiceScanningProvider.ScanningAppServiceAttribute(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            扫描特性 class
            </summary>
            <param name="serviceCollection"></param>
            <param name="classType"></param>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.Enums.DIType">
            <summary>
            依赖注入类型
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.Interface.IDIScoped">
            <summary>
            注册 Scoped(作用域)
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.Interface.IDIScopedSelf">
            <summary>
            注册 Scoped 自身实现类
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.Interface.IDISingleton">
            <summary>
             注册 Singleton（单例）
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.Interface.IDISingletonSelf">
            <summary>
             注册 Singleton 自身实现类
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.Interface.IDITransient">
            <summary>
             注册 Transient(瞬时)
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.ScanDIService.Interface.IDITransientSelf">
            <summary>
             注册 Transient 自身实现类
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.ServiceProviderExtensions">
            <summary>
            服务提供者扩展
            </summary>
        </member>
        <member name="F:KUX.Infrastructure.ServiceProviderExtensions._serviceProvider">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.ServiceProviderExtensions.#cctor">
            <summary>
            构造私有化
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.ServiceProviderExtensions.RegisterServiceProvider(System.IServiceProvider)">
            <summary>
            注册 服务提供者
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:KUX.Infrastructure.ServiceProviderExtensions.GetServiceProvider">
            <summary>
            获取服务提供者
            </summary>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.ServiceProviderExtensions.CreateScope">
            <summary>
            创建服务域
            </summary>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.Services.FrameworkBaseService`1">
            <summary>
            服务层 基类
            </summary>
            <typeparam name="TRepository">默认仓储 类型</typeparam>
        </member>
        <member name="F:KUX.Infrastructure.Services.FrameworkBaseService`1.Repository">
            <summary>
            默认 仓储
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Services.FrameworkBaseService`1.#ctor(`0)">
            <summary>
             构造
            </summary>
            <param name="repository">泛型仓储</param>
        </member>
        <member name="T:KUX.Infrastructure.TextJson.DateTimeJsonConverter">
            <summary>
            Json时间转化器
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.TextJson.DateTimeNullJsonConverter">
            <summary>
            Json时间转化器
            </summary>
        </member>
        <member name="T:KUX.Infrastructure.TextJson.LongJsonConverter">
            <summary>
            Long 类型Json 序列化重写
            在js中传输回导致精度丢失，需要转换成字符串类型
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.TextJson.LongJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            读取json
            </summary>
            <param name="reader">json Reader</param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.TextJson.LongJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Int64,System.Text.Json.JsonSerializerOptions)">
            <summary>
            写json
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KUX.Infrastructure.Token.JwtTokenUtil">
            <summary>
            JWT是由 . 分割的三部分组成：
            头部(Header)
            载荷(Payload) : 这一部分是JWT主要的信息存储部分，其中包含了许多种的声明（claims）。
            签名(Signature)：使用保存在服务端的秘钥对其签名，用来验证发送者的JWT的同时也能确保在期间不被篡改。
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Token.JwtTokenUtil.CreateToken(System.String,System.String,System.String,System.DateTime)">
            <summary>
            创建token
            </summary>
            <param name="id">用户id</param>
            <param name="jwtSecurityKey">key</param>
            <param name="jwtKeyName">密钥名</param>
            <param name="expirs">token有效时间</param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Token.JwtTokenUtil.ReadJwtToken(System.String)">
            <summary>
            读取token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.Token.TokenService">
            <summary>
            token 服务
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Token.TokenService.#ctor(KUX.Infrastructure.AdminConfiguration,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            构造
            </summary>
            <param name="appConfiguration"></param>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:KUX.Infrastructure.Token.TokenService.CreateTokenByAccountId(System.String)">
            <summary>
            根据 id 创建token
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Token.TokenService.GetAccountIdByToken">
            <summary>
            获取 token 并得到 id
            </summary>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.Tools">
            <summary>
            基本方法
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Tools.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            是否 Ajax 请求
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.IsJsonRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            是否 Json 请求 content-type=application/json
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.IsHtmlRequest(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            是否为 html 网页请求
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.Md5Encrypt(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="str">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.DESEncrypt(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为16位</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.DESDecrypt(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为16位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.GetSjs(System.Int32)">
            <summary>
            随机数
            </summary>
            <param name="length">随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.GetWeekByDate(System.DateTime)">
            <summary>
            根据日期获取星期几
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Tools.GetWeekNumInMonth(System.DateTime)">
            <summary>
            得到这个月的第几周
            </summary>
            <param name="daytime">年月日</param>
            <returns>传递过来的时间是第几周</returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.ToJson``1(``0)">
            <summary>
            将对象序列化为Json字符串
            </summary>
            <param name="obj">泛型对象</param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.Serialize``1(``0)">
            <summary>
            将对象序列化为Json字符串
            </summary>
            <param name="obj">泛型对象</param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.Deserialize``1(System.String)">
            <summary>
            将 Json 字符串转换为 指定的对象
            </summary>
            <typeparam name="T">泛型对象</typeparam>
            <param name="json">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.Deserialize(System.String)">
            <summary>
            将 Json 字符串转换为 object对象
            </summary>
            <param name="json">json字符串</param>
            <returns></returns>
        </member>
        <member name="F:KUX.Infrastructure.Tools.GetFileContentType">
            <summary>
            获取文件Content-Type
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Tools.PackageManyZip(System.Collections.Generic.Dictionary{System.String,System.IO.Stream})">
            <summary>
            将多个流进行zip压缩，返回压缩后的流
            </summary>
            <param name="streams">key：文件名；value：文件名对应的要压缩的流</param>
            <returns>压缩后的流</returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.SetCookie(Microsoft.AspNetCore.Http.HttpContext,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            写入Cookie
            </summary>
            <param name="httpContext"></param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expires">过期时长</param>
        </member>
        <member name="M:KUX.Infrastructure.Tools.GetCookie(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            读Cookie值
            </summary>
            <param name="httpContext"></param>
            <param name="key">cookies名称</param>
            <returns>返回的cookies</returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.RemoveCookie(Microsoft.AspNetCore.Http.HttpContext,System.String)">
            <summary>
            删除Cookie对象
            </summary>
            <param name="httpContext"></param>
            <param name="key">Cookie对象名称</param>
        </member>
        <member name="M:KUX.Infrastructure.Tools.FirstCharToLower(System.String)">
            <summary>
            首字母小写写
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.FirstCharToUpper(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.GetClientIp(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取客户Ip
            </summary>
            <param name="context">请求上下文</param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.IsIP(System.String)">
            <summary>
            检查IP地址格式
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.GetBrowserClientInfo(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取浏览器客户端信息
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.StringToBytes(System.String)">
            <summary>
            将16
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:KUX.Infrastructure.Tools.BytesToString(System.Byte[])">
            <summary>
            byte 数组 转化为 string
            </summary>
            <param name="reb"></param>
            <returns></returns>
        </member>
        <member name="T:KUX.Infrastructure.Zip">
            <summary>
            压缩 zip  https://www.cnblogs.com/xielong/p/6165550.html
            </summary>
        </member>
        <member name="M:KUX.Infrastructure.Zip.UnZip(System.String,System.String)">
            <summary>
            解压
            </summary>
            <param name="zipFile">压缩包文件名</param>
            <param name="targetPath">解压缩目标路径</param>
        </member>
    </members>
</doc>
